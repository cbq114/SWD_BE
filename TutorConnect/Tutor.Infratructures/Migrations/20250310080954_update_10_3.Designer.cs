// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tutor.Infratructures.Persistence;

#nullable disable

namespace Tutor.Infratructures.Migrations
{
    [DbContext(typeof(TutorDBContext))]
    [Migration("20250310080954_update_10_3")]
    partial class update_10_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Certifications", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("CertificationFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CertificationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Bookings", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("customer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("LessonId");

                    b.HasIndex("customer");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.FavoriteInstructorDetails", b =>
                {
                    b.Property<int>("FavoriteInstructorId")
                        .HasColumnType("int");

                    b.Property<string>("tutor")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FavoriteInstructorId", "tutor");

                    b.HasIndex("tutor");

                    b.ToTable("FavoriteInstructorDetails");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.FavoriteInstructors", b =>
                {
                    b.Property<int>("FavoriteInstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteInstructorId"));

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteInstructorId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("FavoriteInstructors");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Feedbacks", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId");

                    b.HasIndex("username");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Languagues", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguageId");

                    b.HasIndex("UserName");

                    b.ToTable("Languagues");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.LessonAttendanceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("JoinTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonAttendanceId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParticipantUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonAttendanceId");

                    b.HasIndex("ParticipantUsername");

                    b.ToTable("LessonAttendanceDetails");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.LessonAttendances", b =>
                {
                    b.Property<int>("LessonAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonAttendanceId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonAttendanceId");

                    b.HasIndex("BookingId");

                    b.ToTable("LessonAttendances");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Lessons", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LearningObjectives")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLessonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("Instructor");

                    b.HasIndex("ParentLessonId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageContents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageRoomId")
                        .HasColumnType("int");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageRoomId");

                    b.HasIndex("Username");

                    b.ToTable("MessageContents");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageRoomMember", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageRoomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.HasKey("Username", "MessageRoomId");

                    b.HasIndex("MessageRoomId");

                    b.ToTable("MessageRoomMember");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageRooms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("MessageRooms");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.PayoutResponses", b =>
                {
                    b.Property<int>("PayoutResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayoutResponseId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("PayoutId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PayoutResponseId");

                    b.HasIndex("PayoutId");

                    b.ToTable("PayoutResponses");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Payouts", b =>
                {
                    b.Property<int>("PayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayoutId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PayoutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PayoutId");

                    b.HasIndex("UserName");

                    b.ToTable("Payouts");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeachingExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TutorStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProfileId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.PromotionUsage", b =>
                {
                    b.Property<int>("promotionId")
                        .HasColumnType("int");

                    b.Property<int>("bookingId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("promotionId", "bookingId");

                    b.HasIndex("bookingId");

                    b.ToTable("PromotionUsage");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Promotions", b =>
                {
                    b.Property<int>("promotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("promotionId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("limit")
                        .HasColumnType("int");

                    b.HasKey("promotionId");

                    b.HasIndex("Instructor");

                    b.HasIndex("LessonId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.RefreshTokens", b =>
                {
                    b.Property<int>("RId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RId"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RId");

                    b.HasIndex("UserName");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Refunds", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("walletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("walletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.TutorAvailabilities", b =>
                {
                    b.Property<int>("TutorAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorAvailabilityId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TutorAvailabilityId");

                    b.HasIndex("Instructor");

                    b.ToTable("TutorAvailabilities");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.UpgradeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("upgradeRequests");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Users", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WalletId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Certifications", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Profile", "profile")
                        .WithMany("Certifications")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("profile");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Bookings", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.TutorAvailabilities", "TutorAvailability")
                        .WithMany("Bookings")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Lessons", "Lesson")
                        .WithMany("Bookings")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("customer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("TutorAvailability");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.FavoriteInstructorDetails", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.FavoriteInstructors", "FavoriteInstructor")
                        .WithMany("FavoriteInstructorDetails")
                        .HasForeignKey("FavoriteInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Users", "user")
                        .WithMany()
                        .HasForeignKey("tutor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FavoriteInstructor");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.FavoriteInstructors", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithOne("FavoriteInstructors")
                        .HasForeignKey("Tutor.Domains.Entities.FavoriteInstructors", "UserName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Feedbacks", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Bookings", "Booking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookingId");

                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Languagues", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("Languagues")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.LessonAttendanceDetails", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.LessonAttendances", "LessonAttendance")
                        .WithMany("AttendanceDetails")
                        .HasForeignKey("LessonAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("AttendanceDetails")
                        .HasForeignKey("ParticipantUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonAttendance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.LessonAttendances", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Bookings", "Booking")
                        .WithMany("LessonAttendances")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Lessons", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("Lessons")
                        .HasForeignKey("Instructor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Lessons", "ParentLesson")
                        .WithMany("PrerequisiteLessons")
                        .HasForeignKey("ParentLessonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentLesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageContents", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.MessageRooms", "MessageRoom")
                        .WithMany("Messages")
                        .HasForeignKey("MessageRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("MessageContents")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MessageRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageRoomMember", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.MessageRooms", "MessageRoom")
                        .WithMany("Members")
                        .HasForeignKey("MessageRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("MessageRoomMembers")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MessageRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageRooms", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "Creator")
                        .WithMany("MessageRooms")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Payments", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Bookings", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.PayoutResponses", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Payouts", "Payout")
                        .WithMany("PayoutResponses")
                        .HasForeignKey("PayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payout");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Payouts", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("Payouts")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Profile", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Languagues", "Subject")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Tutor.Domains.Entities.Profile", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.PromotionUsage", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Bookings", "booking")
                        .WithMany("PromotionUsages")
                        .HasForeignKey("bookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Promotions", "promotion")
                        .WithMany("PromotionUsages")
                        .HasForeignKey("promotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("booking");

                    b.Navigation("promotion");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Promotions", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("Promotions")
                        .HasForeignKey("Instructor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tutor.Domains.Entities.Lessons", "Lesson")
                        .WithMany("Promotions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.RefreshTokens", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Refunds", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Bookings", "Booking")
                        .WithMany("Refunds")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Transactions", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("walletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.TutorAvailabilities", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("TutorAvailabilities")
                        .HasForeignKey("Instructor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.UpgradeRequest", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithMany("UpgradeRequests")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Users", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Wallet", b =>
                {
                    b.HasOne("Tutor.Domains.Entities.Users", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Tutor.Domains.Entities.Wallet", "UserName");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Bookings", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("LessonAttendances");

                    b.Navigation("Payments");

                    b.Navigation("PromotionUsages");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.FavoriteInstructors", b =>
                {
                    b.Navigation("FavoriteInstructorDetails");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.LessonAttendances", b =>
                {
                    b.Navigation("AttendanceDetails");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Lessons", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PrerequisiteLessons");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.MessageRooms", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Payouts", b =>
                {
                    b.Navigation("PayoutResponses");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Profile", b =>
                {
                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Promotions", b =>
                {
                    b.Navigation("PromotionUsages");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.TutorAvailabilities", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Users", b =>
                {
                    b.Navigation("AttendanceDetails");

                    b.Navigation("Bookings");

                    b.Navigation("FavoriteInstructors")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Languagues");

                    b.Navigation("Lessons");

                    b.Navigation("MessageContents");

                    b.Navigation("MessageRoomMembers");

                    b.Navigation("MessageRooms");

                    b.Navigation("Payouts");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Promotions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("TutorAvailabilities");

                    b.Navigation("UpgradeRequests");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Tutor.Domains.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
